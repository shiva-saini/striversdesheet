#include<bits/stdc++.h>
bool isSafe(vector<vector<int>> &board,int row,int col,int n){
 
int i;
int j;
for(i=0;i<col;i++){
 if(board[row][i]){
        return false;
}

}


for(i=row,j=col;i>=0 && j>=0;i--,j--){
       if(board[i][j]){
                 return false;
      }
}

for(i=row,j=col;i<n && j>=0;i++,j--){
        if(board[i][j]){
          return false;
       }
}

return true;



}


void addSolution(vector < vector < int >> & board, int n, vector < vector < int >> & ans) {
    vector < int > currentAnswer;
    for (auto x: board) {
        for (auto y: x) {
            currentAnswer.push_back(y);
        }
    }
    ans.push_back(currentAnswer);
}

void solve(vector<vector<int>> &board,int col,int n,vector<vector<int>> &ans){
        if(col>=n){
             addSolution(board, n, ans);
             return;
         }
     for(int i=0;i<n;i++){
            if (isSafe(board, i, col, n)) {
            board[i][col] = 1;
            solve(board, col + 1, n, ans);
            board[i][col] = 0;
        }
      }

 return ;

}


vector < vector < int >> solveNQueens(int n) {
    vector < vector < int >> board(n, vector < int > (n, 0));
    vector < vector < int >> ans;
    solve(board, 0, n, ans);
    return ans;
}










// vector<vector<int>> ans;
// bool is_possible(vector<vector<int>> &board,int row,int col){
//     for(int i=row;i>=0;i--){
//         if(board[i][col] == 1){
//             return false;
//         }
//     }
    
//     for(int i=row,j=col;i>=0&&j>=0;i--,j--){
//         if(board[i][j] == 1){
//             return false;
//         }
//     }
    
//     for(int i=row,j=col;i>=0 && col<board.size();i--,j++){
//         if(board[i][j] == 1){
//             return false;
//         }
//     }
//     return true;
// }
// void dfs(vector<vector<int>> &board,int row){
//     if(row == board.size()){
//        vector<int> temp;
//         for(int i=0;i<board.size();i++){
//             for(int j =0;j<board.size();j++){
//                 temp.push_back(board[i][j]);
//             }
//         }
//         ans.push_back(temp);
//         return ;
//     }
    
//     for(int i=0;i<board.size();i++){
//         if(is_possible(board,row,i)){
//             board[row][i] = 1;
//             dfs(board,row+1);
//             board[row][i] = 0;
//         }
//     }
//     return;
// }
// vector<vector<int>> solveNQueens(int n) {
//    vector<vector<int>> board(n,vector<int> (n,0));
//     dfs(board,0);
//     return ans;
// }
